package net.barik;

import java.util.Map;

import net.barik.SpreadsheetAnalyzer.FunctionEvalType;
import net.barik.SpreadsheetAnalyzer.InputCellType;

public class AnalysisOutput {
	public String errorNotification = "OK";
	
	public String fileName;
	public int sizeInBytes;
	
	public int totalInputCells;
	public int booleanInputCells;
	public int dateTimeInputCells;
	public int errorInputCells;
	public int integerInputCells;
	public int nonIntegerInputCells;
	public int stringInputCells;
	
	public int totalReferencedInput;
	public int booleanReferencedInput;
	public int dateReferencedInput;
	public int errorReferencedInput;
	public int integerReferencedInput;
	public int nonIntegerReferencedInput;
	public int stringReferencedInput;
	
	public int totalFormulas;
	public int booleanFormulas;
	public int dateTimeFormulas;
	public int errorFormulas;
	public int integerFormulas;
	public int nonIntegerFormulas;
	public int stringFormulas;
	public int blankFormulas;
	
	public int formulaCellsReferencingOthers;
	public int formulaCellsReferencedByOthers;
	
	public int formulaCellsOccuringOnce;
	public int formulaCellsOccuring2Plus;
	public int formulaCellsOccuring5Plus;
	public int formulaCellsOccuring10Plus;
	public int formulaCellsOccuring25Plus;
	public int formulaCellsOccuring50Plus;
	public int formulaCellsOccuring100Plus;
	
	public int mostFrequentFormulaCount;

	public String mostFrequentFormula;
	public int numCharts;
	public Boolean containsMacros;
	
	public int countABS;
	public int countACOS;
	public int countACOSH;
	public int countACOT;
	public int countACOTH;
	public int countACCRINT;
	public int countACCRINTM;
	public int countADDRESS;
	public int countAGGREGATE;
	public int countAND;
	public int countARABIC;
	public int countAREAS;
	public int countASIN;
	public int countASINH;
	public int countATAN;
	public int countATAN2;
	public int countATANH;
	public int countAMORDEGRC;
	public int countAMORLINC;
	public int countAVEDEV;
	public int countAVERAGE;
	public int countAVERAGEA;
	public int countAVERAGEIF;
	public int countAVERAGEIFS;
	public int countBASE;
	public int countBAHTTEXT;
	public int countBESSELI;
	public int countBESSELJ;
	public int countBESSELK;
	public int countBESSELY;
	public int countBETADIST;
	public int countBETA_DIST;
	public int countBETAINV;
	public int countBETA_INV;
	public int countBIN2DEC;
	public int countBIN2HEX;
	public int countBIN2OCT;
	public int countBINOMDIST;
	public int countBINOM_DIST;
	public int countBINOM_DIST_RANGE;
	public int countBINOM_INV;
	public int countBITAND;
	public int countBITOR;
	public int countBITLSHIFT;
	public int countBITRSHIFT;
	public int countBITXOR;
	public int countCEILING;
	public int countCEILING_MATH;
	public int countCEILING_PRECISE;
	public int countCELL;
	public int countCHAR;
	public int countCHIDIST;
	public int countCHISQ_DIST;
	public int countCHISQ_DIST_RT;
	public int countCHIINV;
	public int countCHISQ_INV;
	public int countCHI_INV_RT;
	public int countCHITEST;
	public int countCHISQ_TEST;
	public int countCHOOSE;
	public int countCLEAN;
	public int countCODE;
	public int countCOLUMN;
	public int countCOLUMNS;
	public int countCOMBIN;
	public int countCOMBINA;
	public int countCOMPLEX;
	public int countCONCATENATE;
	public int countCONFIDENCE;
	public int countCONFIDENCE_NORM;
	public int countCONFIDENCE_T;
	public int countCONVERT;
	public int countCORREL;
	public int countCOS;
	public int countCOSH;
	public int countCOT;
	public int countCOTH;
	public int countCOUNT;
	public int countCOUNTA;
	public int countCOUNTBLANK;
	public int countCOUNTIF;
	public int countCOUNTIFS;
	public int countCOUPDAYBS;
	public int countCOUPDAYS;
	public int countCOUPDAYSNC;
	public int countCOUPNCD;
	public int countCOUPNUM;
	public int countCOUPPCD;
	public int countCOVAR;
	public int countCOVARIANCE_P;
	public int countCOVARIANCE_S;
	public int countCRITBINOM;
	public int countCSC;
	public int countCSCH;
	public int countCUMIPMT;
	public int countCUMPRINC;
	public int countDATE;
	public int countDATEVALUE;
	public int countDAVERAGE;
	public int countDAY;
	public int countDAYS;
	public int countDAYS360;
	public int countDB;
	public int countDCOUNT;
	public int countDCOUNTA;
	public int countDDB;
	public int countDEC2BIN;
	public int countDEC2HEX;
	public int countDEC2OCT;
	public int countDECIMAL;
	public int countDEGREES;
	public int countDELTA;
	public int countDEVSQ;
	public int countDGET;
	public int countDISC;
	public int countDMAX;
	public int countDMIN;
	public int countDOLLAR;
	public int countDOLLARDE;
	public int countDOLLARFR;
	public int countDPRODUCT;
	public int countDSTDEV;
	public int countDSTDEVP;
	public int countDSUM;
	public int countDURATION;
	public int countDVAR;
	public int countDVARP;
	public int countEDATE;
	public int countEFFECT;
	public int countENCODEURL;
	public int countEOMONTH;
	public int countERF;
	public int countERF_PRECISE;
	public int countERFC;
	public int countERFC_PRECISE;
	public int countERROR_TYPE;
	public int countEVEN;
	public int countEXACT;
	public int countEXP;
	public int countEXPONDIST;
	public int countEXPON_DIST;
	public int countFACT;
	public int countFACTDOUBLE;
	public int countFALSE;
	public int countFDIST;
	public int countF_DIST;
	public int countF_DIST_RT;
	public int countFILTERXML;
	public int countFIND;
	public int countFINV;
	public int countF_INV;
	public int countF_INV_RT;
	public int countFISHER;
	public int countFISHERINV;
	public int countFIXED;
	public int countFLOOR;
	public int countFLOOR_MATH;
	public int countFLOOR_PRECISE;
	public int countFORECAST;
	public int countFORMULATEXT;
	public int countFREQUENCY;
	public int countFTEST;
	public int countF_TEST;
	public int countFV;
	public int countFVSCHEDULE;
	public int countGAMMA;
	public int countGAMMADIST;
	public int countGAMMA_DIST;
	public int countGAMMAINV;
	public int countGAMMA_INV;
	public int countGAMMALN;
	public int countGAMMALN_PRECISE;
	public int countGAUSS;
	public int countGCD;
	public int countGEOMEAN;
	public int countGESTEP;
	public int countGETPIVOTDATA;
	public int countGROWTH;
	public int countHARMEAN;
	public int countHEX2BIN;
	public int countHEX2DEC;
	public int countHEX2OCT;
	public int countHLOOKUP;
	public int countHOUR;
	public int countHYPERLINK;
	public int countHYPGEOMDIST;
	public int countHYPGEOM_DIST;
	public int countIF;
	public int countIFERROR;
	public int countIFNA;
	public int countIMABS;
	public int countIMAGINARY;
	public int countIMARGUMENT;
	public int countIMCONJUGATE;
	public int countIMCOS;
	public int countIMCOSH;
	public int countIMCOT;
	public int countIMCSC;
	public int countIMCSCH;
	public int countIMDIV;
	public int countIMEXP;
	public int countIMLN;
	public int countIMLOG10;
	public int countIMLOG2;
	public int countIMPOWER;
	public int countIMPRODUCT;
	public int countIMREAL;
	public int countIMSEC;
	public int countIMSECH;
	public int countIMSIN;
	public int countIMSINH;
	public int countIMSQRT;
	public int countIMSUB;
	public int countIMSUM;
	public int countIMTAN;
	public int countINDEX;
	public int countINDIRECT;
	public int countINFO;
	public int countINT;
	public int countINTERCEPT;
	public int countINTRATE;
	public int countIPMT;
	public int countIRR;
	public int countISBLANK;
	public int countISERR;
	public int countISERROR;
	public int countISEVEN;
	public int countISFORMULA;
	public int countISLOGICAL;
	public int countISNA;
	public int countISNONTEXT;
	public int countISNUMBER;
	public int countISO_CEILING;
	public int countISODD;
	public int countISOWEEKNUM;
	public int countISPMT;
	public int countISREF;
	public int countISTEXT;
	public int countKURT;
	public int countLARGE;
	public int countLCM;
	public int countLEFT;
	public int countLEN;
	public int countLINEST;
	public int countLN;
	public int countLOG;
	public int countLOG10;
	public int countLOGEST;
	public int countLOGNORMDIST;
	public int countLOGNORM_DIST;
	public int countLOGINV;
	public int countLOGNORM_INV;
	public int countLOOKUP;
	public int countLOWER;
	public int countMATCH;
	public int countMAX;
	public int countMAXA;
	public int countMDETERM;
	public int countMDURATION;
	public int countMEDIAN;
	public int countMID;
	public int countMIN;
	public int countMINA;
	public int countMINUTE;
	public int countMINVERSE;
	public int countMIRR;
	public int countMMULT;
	public int countMOD;
	public int countMODE;
	public int countMODE_MULT;
	public int countMODE_SNGL;
	public int countMONTH;
	public int countMROUND;
	public int countMULTINOMIAL;
	public int countMUNIT;
	public int countN;
	public int countNA;
	public int countNEGBINOMDIST;
	public int countNEGBINOM_DIST;
	public int countNETWORKDAYS;
	public int countNETWORKDAYS_INTL;
	public int countNOMINAL;
	public int countNORMDIST;
	public int countNORM_DIST;
	public int countNORMINV;
	public int countNORM_INV;
	public int countNORMSDIST;
	public int countNORM_S_DIST;
	public int countNORMSINV;
	public int countNORM_S_INV;
	public int countNOT;
	public int countNOW;
	public int countNPER;
	public int countNPV;
	public int countNUMBERVALUE;
	public int countOCT2BIN;
	public int countOCT2DEC;
	public int countOCT2HEX;
	public int countODD;
	public int countODDFPRICE;
	public int countODDFYIELD;
	public int countODDLPRICE;
	public int countODDLYIELD;
	public int countOFFSET;
	public int countOR;
	public int countPDURATION;
	public int countPEARSON;
	public int countPERCENTILE;
	public int countPERCENTILE_EXC;
	public int countPERCENTILE_INC;
	public int countPERCENTRANK;
	public int countPERCENTRANK_EXC;
	public int countPERCENTRANK_INC;
	public int countPERMUT;
	public int countPERMUTATIONA;
	public int countPHI;
	public int countPI;
	public int countPMT;
	public int countPOISSON;
	public int countPOISSON_DIST;
	public int countPOWER;
	public int countPPMT;
	public int countPRICE;
	public int countPRICEDISC;
	public int countPRICEMAT;
	public int countPROB;
	public int countPRODUCT;
	public int countPROPER;
	public int countPV;
	public int countQUARTILE;
	public int countQUARTILE_EXC;
	public int countQUARTILE_INC;
	public int countQUOTIENT;
	public int countRADIANS;
	public int countRAND;
	public int countRANDBETWEEN;
	public int countRANK;
	public int countRANK_AVG;
	public int countRANK_EQ;
	public int countRATE;
	public int countRECEIVED;
	public int countREPLACE;
	public int countREPT;
	public int countRIGHT;
	public int countROMAN;
	public int countROUND;
	public int countROUNDDOWN;
	public int countROUNDUP;
	public int countROW;
	public int countROWS;
	public int countRRI;
	public int countRSQ;
	public int countRTD;
	public int countSEARCH;
	public int countSEC;
	public int countSECH;
	public int countSECOND;
	public int countSERIESSUM;
	public int countSHEET;
	public int countSHEETS;
	public int countSIGN;
	public int countSIN;
	public int countSINH;
	public int countSKEW;
	public int countSKEW_P;
	public int countSLN;
	public int countSLOPE;
	public int countSMALL;
	public int countSQRT;
	public int countSQRTPI;
	public int countSTANDARDIZE;
	public int countSTDEV;
	public int countSTDEVA;
	public int countSTDEVP;
	public int countSTDEVPA;
	public int countSTDEV_P;
	public int countSTDEV_S;
	public int countSTEYX;
	public int countSUBSTITUTE;
	public int countSUBTOTAL;
	public int countSUM;
	public int countSUMIF;
	public int countSUMIFS;
	public int countSUMPRODUCT;
	public int countSUMSQ;
	public int countSUMX2MY2;
	public int countSUMX2PY2;
	public int countSUMXMY2;
	public int countSYD;
	public int countT;
	public int countTAN;
	public int countTANH;
	public int countTBILLEQ;
	public int countTBILLPRICE;
	public int countTBILLYIELD;
	public int countTDIST;
	public int countT_DIST;
	public int countT_DIST_2T;
	public int countT_DIST_RT;
	public int countTEXT;
	public int countTIME;
	public int countTIMEVALUE;
	public int countTINV;
	public int countT_INV;
	public int countT_INV_2T;
	public int countTODAY;
	public int countTRANSPOSE;
	public int countTREND;
	public int countTRIM;
	public int countTRIMMEAN;
	public int countTRUE;
	public int countTRUNC;
	public int countTTEST;
	public int countT_TEST;
	public int countTYPE;
	public int countUNICHAR;
	public int countUNICODE;
	public int countUPPER;
	public int countVALUE;
	public int countVAR;
	public int countVARA;
	public int countVARP;
	public int countVARPA;
	public int countVAR_P;
	public int countVAR_S;
	public int countVDB;
	public int countVLOOKUP;
	public int countWEBSERVICE;
	public int countWEEKDAY;
	public int countWEEKNUM;
	public int countWEIBULL;
	public int countWEIBULL_DIST;
	public int countWORKDAY;
	public int countWORKDAY_INTL;
	public int countXIRR;
	public int countXNPV;
	public int countXOR;
	public int countYEAR;
	public int countYEARFRAC;
	public int countYIELD;
	public int countYIELDDISC;
	public int countYIELDMAT;
	public int countZTEST;
	public int countZ_TEST;
	
	
	
	public AnalysisOutput(String fileName,
			int sizeInBytes,
			Map<InputCellType, Integer> inputCounts,
			Map<InputCellType, Integer> inputReferences,
			Map<FunctionEvalType, Integer> formulaCells,
			int formulasReferencing,
			int formulasReferenced,
			int occur1,
			int occur2,
			int occur5,
			int occur10,
			int occur25,
			int occur50,
			int occur100,
			int mostFreqFormulaCount,
			String mostFreqFormula,
			int numCharts,
			Boolean containsMacro,
			Map<String, Integer> functionCounts
			){

		this.fileName = fileName; 
		
		this.sizeInBytes = sizeInBytes; 
		
		//INPUT CELLS
		this.totalInputCells = total(inputCounts);
		
		this.booleanInputCells = nonNull(inputCounts.get(InputCellType.BOOLEAN));
		this.dateTimeInputCells = nonNull(inputCounts.get(InputCellType.DATE));
		this.errorInputCells = nonNull(inputCounts.get(InputCellType.ERROR));
		this.integerInputCells = nonNull(inputCounts.get(InputCellType.INTEGER));
		this.nonIntegerInputCells = nonNull(inputCounts.get(InputCellType.NON_INTEGER_NUMBER));
		this.stringInputCells = nonNull(inputCounts.get(InputCellType.STRING));
		//-------------------------------------------------------
		
		
		//References
		this.totalReferencedInput = total(inputReferences);
		
		this.booleanReferencedInput = nonNull(inputReferences.get(InputCellType.BOOLEAN));
		this.dateReferencedInput = nonNull(inputReferences.get(InputCellType.DATE));
		this.errorReferencedInput = nonNull(inputReferences.get(InputCellType.ERROR));
		this.integerReferencedInput = nonNull(inputReferences.get(InputCellType.INTEGER));
		this.nonIntegerReferencedInput = nonNull(inputReferences.get(InputCellType.NON_INTEGER_NUMBER));
		this.stringReferencedInput = nonNull(inputReferences.get(InputCellType.STRING));
		//----------------------------------------------------------
		
		
		//Formula Eval Types
		this.totalFormulas = total(formulaCells);

		this.booleanFormulas = nonNull(formulaCells.get(FunctionEvalType.BOOLEAN));
		this.dateTimeFormulas = nonNull(formulaCells.get(FunctionEvalType.DATE));
		this.errorFormulas = nonNull(formulaCells.get(FunctionEvalType.ERROR));
		this.integerFormulas = nonNull(formulaCells.get(FunctionEvalType.INTEGER));
		this.nonIntegerFormulas = nonNull(formulaCells.get(FunctionEvalType.NON_INTEGER_NUMBER));
		this.stringFormulas = nonNull(formulaCells.get(FunctionEvalType.STRING));
		this.blankFormulas = nonNull(formulaCells.get(FunctionEvalType.BLANK));
		//--------------------------------------------------------
		
		
		this.formulaCellsReferencingOthers = formulasReferencing;
		this.formulaCellsReferencedByOthers = formulasReferenced;
		
		this.formulaCellsOccuringOnce = occur1;
		this.formulaCellsOccuring2Plus = occur2;
		this.formulaCellsOccuring5Plus = occur5;
		this.formulaCellsOccuring10Plus = occur10;
		this.formulaCellsOccuring25Plus = occur25;
		this.formulaCellsOccuring50Plus = occur50;
		this.formulaCellsOccuring100Plus = occur100;
		
		this.mostFrequentFormulaCount = mostFreqFormulaCount;

		this.mostFrequentFormula= mostFreqFormula;
		this.numCharts = numCharts;
		this.containsMacros = containsMacro;
		
		this.countABS = nonNull(functionCounts.get("ABS"));
		this.countACOS = nonNull(functionCounts.get("ACOS"));
		this.countACOSH = nonNull(functionCounts.get("ACOSH"));
		this.countACOT = nonNull(functionCounts.get("ACOT"));
		this.countACOTH = nonNull(functionCounts.get("ACOTH"));
		this.countACCRINT = nonNull(functionCounts.get("ACCRINT"));
		this.countACCRINTM = nonNull(functionCounts.get("ACCRINTM"));
		this.countADDRESS = nonNull(functionCounts.get("ADDRESS"));
		this.countAGGREGATE = nonNull(functionCounts.get("AGGREGATE"));
		this.countAND = nonNull(functionCounts.get("AND"));
		this.countARABIC = nonNull(functionCounts.get("ARABIC"));
		this.countAREAS = nonNull(functionCounts.get("AREAS"));
		this.countASIN = nonNull(functionCounts.get("ASIN"));
		this.countASINH = nonNull(functionCounts.get("ASINH"));
		this.countATAN = nonNull(functionCounts.get("ATAN"));
		this.countATAN2 = nonNull(functionCounts.get("ATAN2"));
		this.countATANH = nonNull(functionCounts.get("ATANH"));
		this.countAMORDEGRC = nonNull(functionCounts.get("AMORDEGRC"));
		this.countAMORLINC = nonNull(functionCounts.get("AMORLINC"));
		this.countAVEDEV = nonNull(functionCounts.get("AVEDEV"));
		this.countAVERAGE = nonNull(functionCounts.get("AVERAGE"));
		this.countAVERAGEA = nonNull(functionCounts.get("AVERAGEA"));
		this.countAVERAGEIF = nonNull(functionCounts.get("AVERAGEIF"));
		this.countAVERAGEIFS = nonNull(functionCounts.get("AVERAGEIFS"));
		this.countBASE = nonNull(functionCounts.get("BASE"));
		this.countBAHTTEXT = nonNull(functionCounts.get("BAHTTEXT"));
		this.countBESSELI = nonNull(functionCounts.get("BESSELI"));
		this.countBESSELJ = nonNull(functionCounts.get("BESSELJ"));
		this.countBESSELK = nonNull(functionCounts.get("BESSELK"));
		this.countBESSELY = nonNull(functionCounts.get("BESSELY"));
		this.countBETADIST = nonNull(functionCounts.get("BETADIST"));
		this.countBETA_DIST = nonNull(functionCounts.get("BETA.DIST"));
		this.countBETAINV = nonNull(functionCounts.get("BETAINV"));
		this.countBETA_INV = nonNull(functionCounts.get("BETA.INV"));
		this.countBIN2DEC = nonNull(functionCounts.get("BIN2DEC"));
		this.countBIN2HEX = nonNull(functionCounts.get("BIN2HEX"));
		this.countBIN2OCT = nonNull(functionCounts.get("BIN2OCT"));
		this.countBINOMDIST = nonNull(functionCounts.get("BINOMDIST"));
		this.countBINOM_DIST = nonNull(functionCounts.get("BINOM.DIST"));
		this.countBINOM_DIST_RANGE = nonNull(functionCounts.get("BINOM.DIST.RANGE"));
		this.countBINOM_INV = nonNull(functionCounts.get("BINOM.INV"));
		this.countBITAND = nonNull(functionCounts.get("BITAND"));
		this.countBITOR = nonNull(functionCounts.get("BITOR"));
		this.countBITLSHIFT = nonNull(functionCounts.get("BITLSHIFT"));
		this.countBITRSHIFT = nonNull(functionCounts.get("BITRSHIFT"));
		this.countBITXOR = nonNull(functionCounts.get("BITXOR"));
		this.countCEILING = nonNull(functionCounts.get("CEILING"));
		this.countCEILING_MATH = nonNull(functionCounts.get("CEILING.MATH"));
		this.countCEILING_PRECISE = nonNull(functionCounts.get("CEILING.PRECISE"));
		this.countCELL = nonNull(functionCounts.get("CELL"));
		this.countCHAR = nonNull(functionCounts.get("CHAR"));
		this.countCHIDIST = nonNull(functionCounts.get("CHIDIST"));
		this.countCHISQ_DIST = nonNull(functionCounts.get("CHISQ.DIST"));
		this.countCHISQ_DIST_RT = nonNull(functionCounts.get("CHISQ.DIST.RT"));
		this.countCHIINV = nonNull(functionCounts.get("CHIINV"));
		this.countCHISQ_INV = nonNull(functionCounts.get("CHISQ.INV"));
		this.countCHI_INV_RT = nonNull(functionCounts.get("CHI.INV.RT"));
		this.countCHITEST = nonNull(functionCounts.get("CHITEST"));
		this.countCHISQ_TEST = nonNull(functionCounts.get("CHISQ.TEST"));
		this.countCHOOSE = nonNull(functionCounts.get("CHOOSE"));
		this.countCLEAN = nonNull(functionCounts.get("CLEAN"));
		this.countCODE = nonNull(functionCounts.get("CODE"));
		this.countCOLUMN = nonNull(functionCounts.get("COLUMN"));
		this.countCOLUMNS = nonNull(functionCounts.get("COLUMNS"));
		this.countCOMBIN = nonNull(functionCounts.get("COMBIN"));
		this.countCOMBINA = nonNull(functionCounts.get("COMBINA"));
		this.countCOMPLEX = nonNull(functionCounts.get("COMPLEX"));
		this.countCONCATENATE = nonNull(functionCounts.get("CONCATENATE"));
		this.countCONFIDENCE = nonNull(functionCounts.get("CONFIDENCE"));
		this.countCONFIDENCE_NORM = nonNull(functionCounts.get("CONFIDENCE.NORM"));
		this.countCONFIDENCE_T = nonNull(functionCounts.get("CONFIDENCE.T"));
		this.countCONVERT = nonNull(functionCounts.get("CONVERT"));
		this.countCORREL = nonNull(functionCounts.get("CORREL"));
		this.countCOS = nonNull(functionCounts.get("COS"));
		this.countCOSH = nonNull(functionCounts.get("COSH"));
		this.countCOT = nonNull(functionCounts.get("COT"));
		this.countCOTH = nonNull(functionCounts.get("COTH"));
		this.countCOUNT = nonNull(functionCounts.get("COUNT"));
		this.countCOUNTA = nonNull(functionCounts.get("COUNTA"));
		this.countCOUNTBLANK = nonNull(functionCounts.get("COUNTBLANK"));
		this.countCOUNTIF = nonNull(functionCounts.get("COUNTIF"));
		this.countCOUNTIFS = nonNull(functionCounts.get("COUNTIFS"));
		this.countCOUPDAYBS = nonNull(functionCounts.get("COUPDAYBS"));
		this.countCOUPDAYS = nonNull(functionCounts.get("COUPDAYS"));
		this.countCOUPDAYSNC = nonNull(functionCounts.get("COUPDAYSNC"));
		this.countCOUPNCD = nonNull(functionCounts.get("COUPNCD"));
		this.countCOUPNUM = nonNull(functionCounts.get("COUPNUM"));
		this.countCOUPPCD = nonNull(functionCounts.get("COUPPCD"));
		this.countCOVAR = nonNull(functionCounts.get("COVAR"));
		this.countCOVARIANCE_P = nonNull(functionCounts.get("COVARIANCE.P"));
		this.countCOVARIANCE_S = nonNull(functionCounts.get("COVARIANCE.S"));
		this.countCRITBINOM = nonNull(functionCounts.get("CRITBINOM"));
		this.countCSC = nonNull(functionCounts.get("CSC"));
		this.countCSCH = nonNull(functionCounts.get("CSCH"));
		this.countCUMIPMT = nonNull(functionCounts.get("CUMIPMT"));
		this.countCUMPRINC = nonNull(functionCounts.get("CUMPRINC"));
		this.countDATE = nonNull(functionCounts.get("DATE"));
		this.countDATEVALUE = nonNull(functionCounts.get("DATEVALUE"));
		this.countDAVERAGE = nonNull(functionCounts.get("DAVERAGE"));
		this.countDAY = nonNull(functionCounts.get("DAY"));
		this.countDAYS = nonNull(functionCounts.get("DAYS"));
		this.countDAYS360 = nonNull(functionCounts.get("DAYS360"));
		this.countDB = nonNull(functionCounts.get("DB"));
		this.countDCOUNT = nonNull(functionCounts.get("DCOUNT"));
		this.countDCOUNTA = nonNull(functionCounts.get("DCOUNTA"));
		this.countDDB = nonNull(functionCounts.get("DDB"));
		this.countDEC2BIN = nonNull(functionCounts.get("DEC2BIN"));
		this.countDEC2HEX = nonNull(functionCounts.get("DEC2HEX"));
		this.countDEC2OCT = nonNull(functionCounts.get("DEC2OCT"));
		this.countDECIMAL = nonNull(functionCounts.get("DECIMAL"));
		this.countDEGREES = nonNull(functionCounts.get("DEGREES"));
		this.countDELTA = nonNull(functionCounts.get("DELTA"));
		this.countDEVSQ = nonNull(functionCounts.get("DEVSQ"));
		this.countDGET = nonNull(functionCounts.get("DGET"));
		this.countDISC = nonNull(functionCounts.get("DISC"));
		this.countDMAX = nonNull(functionCounts.get("DMAX"));
		this.countDMIN = nonNull(functionCounts.get("DMIN"));
		this.countDOLLAR = nonNull(functionCounts.get("DOLLAR"));
		this.countDOLLARDE = nonNull(functionCounts.get("DOLLARDE"));
		this.countDOLLARFR = nonNull(functionCounts.get("DOLLARFR"));
		this.countDPRODUCT = nonNull(functionCounts.get("DPRODUCT"));
		this.countDSTDEV = nonNull(functionCounts.get("DSTDEV"));
		this.countDSTDEVP = nonNull(functionCounts.get("DSTDEVP"));
		this.countDSUM = nonNull(functionCounts.get("DSUM"));
		this.countDURATION = nonNull(functionCounts.get("DURATION"));
		this.countDVAR = nonNull(functionCounts.get("DVAR"));
		this.countDVARP = nonNull(functionCounts.get("DVARP"));
		this.countEDATE = nonNull(functionCounts.get("EDATE"));
		this.countEFFECT = nonNull(functionCounts.get("EFFECT"));
		this.countENCODEURL = nonNull(functionCounts.get("ENCODEURL"));
		this.countEOMONTH = nonNull(functionCounts.get("EOMONTH"));
		this.countERF = nonNull(functionCounts.get("ERF"));
		this.countERF_PRECISE = nonNull(functionCounts.get("ERF.PRECISE"));
		this.countERFC = nonNull(functionCounts.get("ERFC"));
		this.countERFC_PRECISE = nonNull(functionCounts.get("ERFC.PRECISE"));
		this.countERROR_TYPE = nonNull(functionCounts.get("ERROR.TYPE"));
		this.countEVEN = nonNull(functionCounts.get("EVEN"));
		this.countEXACT = nonNull(functionCounts.get("EXACT"));
		this.countEXP = nonNull(functionCounts.get("EXP"));
		this.countEXPONDIST = nonNull(functionCounts.get("EXPONDIST"));
		this.countEXPON_DIST = nonNull(functionCounts.get("EXPON.DIST"));
		this.countFACT = nonNull(functionCounts.get("FACT"));
		this.countFACTDOUBLE = nonNull(functionCounts.get("FACTDOUBLE"));
		this.countFALSE = nonNull(functionCounts.get("FALSE"));
		this.countFDIST = nonNull(functionCounts.get("FDIST"));
		this.countF_DIST = nonNull(functionCounts.get("F.DIST"));
		this.countF_DIST_RT = nonNull(functionCounts.get("F.DIST.RT"));
		this.countFILTERXML = nonNull(functionCounts.get("FILTERXML"));
		this.countFIND = nonNull(functionCounts.get("FIND"));
		this.countFINV = nonNull(functionCounts.get("FINV"));
		this.countF_INV = nonNull(functionCounts.get("F.INV"));
		this.countF_INV_RT = nonNull(functionCounts.get("F.INV.RT"));
		this.countFISHER = nonNull(functionCounts.get("FISHER"));
		this.countFISHERINV = nonNull(functionCounts.get("FISHERINV"));
		this.countFIXED = nonNull(functionCounts.get("FIXED"));
		this.countFLOOR = nonNull(functionCounts.get("FLOOR"));
		this.countFLOOR_MATH = nonNull(functionCounts.get("FLOOR.MATH"));
		this.countFLOOR_PRECISE = nonNull(functionCounts.get("FLOOR.PRECISE"));
		this.countFORECAST = nonNull(functionCounts.get("FORECAST"));
		this.countFORMULATEXT = nonNull(functionCounts.get("FORMULATEXT"));
		this.countFREQUENCY = nonNull(functionCounts.get("FREQUENCY"));
		this.countFTEST = nonNull(functionCounts.get("FTEST"));
		this.countF_TEST = nonNull(functionCounts.get("F.TEST"));
		this.countFV = nonNull(functionCounts.get("FV"));
		this.countFVSCHEDULE = nonNull(functionCounts.get("FVSCHEDULE"));
		this.countGAMMA = nonNull(functionCounts.get("GAMMA"));
		this.countGAMMADIST = nonNull(functionCounts.get("GAMMADIST"));
		this.countGAMMA_DIST = nonNull(functionCounts.get("GAMMA.DIST"));
		this.countGAMMAINV = nonNull(functionCounts.get("GAMMAINV"));
		this.countGAMMA_INV = nonNull(functionCounts.get("GAMMA.INV"));
		this.countGAMMALN = nonNull(functionCounts.get("GAMMALN"));
		this.countGAMMALN_PRECISE = nonNull(functionCounts.get("GAMMALN.PRECISE"));
		this.countGAUSS = nonNull(functionCounts.get("GAUSS"));
		this.countGCD = nonNull(functionCounts.get("GCD"));
		this.countGEOMEAN = nonNull(functionCounts.get("GEOMEAN"));
		this.countGESTEP = nonNull(functionCounts.get("GESTEP"));
		this.countGETPIVOTDATA = nonNull(functionCounts.get("GETPIVOTDATA"));
		this.countGROWTH = nonNull(functionCounts.get("GROWTH"));
		this.countHARMEAN = nonNull(functionCounts.get("HARMEAN"));
		this.countHEX2BIN = nonNull(functionCounts.get("HEX2BIN"));
		this.countHEX2DEC = nonNull(functionCounts.get("HEX2DEC"));
		this.countHEX2OCT = nonNull(functionCounts.get("HEX2OCT"));
		this.countHLOOKUP = nonNull(functionCounts.get("HLOOKUP"));
		this.countHOUR = nonNull(functionCounts.get("HOUR"));
		this.countHYPERLINK = nonNull(functionCounts.get("HYPERLINK"));
		this.countHYPGEOMDIST = nonNull(functionCounts.get("HYPGEOMDIST"));
		this.countHYPGEOM_DIST = nonNull(functionCounts.get("HYPGEOM.DIST"));
		this.countIF = nonNull(functionCounts.get("IF"));
		this.countIFERROR = nonNull(functionCounts.get("IFERROR"));
		this.countIFNA = nonNull(functionCounts.get("IFNA"));
		this.countIMABS = nonNull(functionCounts.get("IMABS"));
		this.countIMAGINARY = nonNull(functionCounts.get("IMAGINARY"));
		this.countIMARGUMENT = nonNull(functionCounts.get("IMARGUMENT"));
		this.countIMCONJUGATE = nonNull(functionCounts.get("IMCONJUGATE"));
		this.countIMCOS = nonNull(functionCounts.get("IMCOS"));
		this.countIMCOSH = nonNull(functionCounts.get("IMCOSH"));
		this.countIMCOT = nonNull(functionCounts.get("IMCOT"));
		this.countIMCSC = nonNull(functionCounts.get("IMCSC"));
		this.countIMCSCH = nonNull(functionCounts.get("IMCSCH"));
		this.countIMDIV = nonNull(functionCounts.get("IMDIV"));
		this.countIMEXP = nonNull(functionCounts.get("IMEXP"));
		this.countIMLN = nonNull(functionCounts.get("IMLN"));
		this.countIMLOG10 = nonNull(functionCounts.get("IMLOG10"));
		this.countIMLOG2 = nonNull(functionCounts.get("IMLOG2"));
		this.countIMPOWER = nonNull(functionCounts.get("IMPOWER"));
		this.countIMPRODUCT = nonNull(functionCounts.get("IMPRODUCT"));
		this.countIMREAL = nonNull(functionCounts.get("IMREAL"));
		this.countIMSEC = nonNull(functionCounts.get("IMSEC"));
		this.countIMSECH = nonNull(functionCounts.get("IMSECH"));
		this.countIMSIN = nonNull(functionCounts.get("IMSIN"));
		this.countIMSINH = nonNull(functionCounts.get("IMSINH"));
		this.countIMSQRT = nonNull(functionCounts.get("IMSQRT"));
		this.countIMSUB = nonNull(functionCounts.get("IMSUB"));
		this.countIMSUM = nonNull(functionCounts.get("IMSUM"));
		this.countIMTAN = nonNull(functionCounts.get("IMTAN"));
		this.countINDEX = nonNull(functionCounts.get("INDEX"));
		this.countINDIRECT = nonNull(functionCounts.get("INDIRECT"));
		this.countINFO = nonNull(functionCounts.get("INFO"));
		this.countINT = nonNull(functionCounts.get("INT"));
		this.countINTERCEPT = nonNull(functionCounts.get("INTERCEPT"));
		this.countINTRATE = nonNull(functionCounts.get("INTRATE"));
		this.countIPMT = nonNull(functionCounts.get("IPMT"));
		this.countIRR = nonNull(functionCounts.get("IRR"));
		this.countISBLANK = nonNull(functionCounts.get("ISBLANK"));
		this.countISERR = nonNull(functionCounts.get("ISERR"));
		this.countISERROR = nonNull(functionCounts.get("ISERROR"));
		this.countISEVEN = nonNull(functionCounts.get("ISEVEN"));
		this.countISFORMULA = nonNull(functionCounts.get("ISFORMULA"));
		this.countISLOGICAL = nonNull(functionCounts.get("ISLOGICAL"));
		this.countISNA = nonNull(functionCounts.get("ISNA"));
		this.countISNONTEXT = nonNull(functionCounts.get("ISNONTEXT"));
		this.countISNUMBER = nonNull(functionCounts.get("ISNUMBER"));
		this.countISO_CEILING = nonNull(functionCounts.get("ISO.CEILING"));
		this.countISODD = nonNull(functionCounts.get("ISODD"));
		this.countISOWEEKNUM = nonNull(functionCounts.get("ISOWEEKNUM"));
		this.countISPMT = nonNull(functionCounts.get("ISPMT"));
		this.countISREF = nonNull(functionCounts.get("ISREF"));
		this.countISTEXT = nonNull(functionCounts.get("ISTEXT"));
		this.countKURT = nonNull(functionCounts.get("KURT"));
		this.countLARGE = nonNull(functionCounts.get("LARGE"));
		this.countLCM = nonNull(functionCounts.get("LCM"));
		this.countLEFT = nonNull(functionCounts.get("LEFT"));
		this.countLEN = nonNull(functionCounts.get("LEN"));
		this.countLINEST = nonNull(functionCounts.get("LINEST"));
		this.countLN = nonNull(functionCounts.get("LN"));
		this.countLOG = nonNull(functionCounts.get("LOG"));
		this.countLOG10 = nonNull(functionCounts.get("LOG10"));
		this.countLOGEST = nonNull(functionCounts.get("LOGEST"));
		this.countLOGNORMDIST = nonNull(functionCounts.get("LOGNORMDIST"));
		this.countLOGNORM_DIST = nonNull(functionCounts.get("LOGNORM.DIST"));
		this.countLOGINV = nonNull(functionCounts.get("LOGINV"));
		this.countLOGNORM_INV = nonNull(functionCounts.get("LOGNORM.INV"));
		this.countLOOKUP = nonNull(functionCounts.get("LOOKUP"));
		this.countLOWER = nonNull(functionCounts.get("LOWER"));
		this.countMATCH = nonNull(functionCounts.get("MATCH"));
		this.countMAX = nonNull(functionCounts.get("MAX"));
		this.countMAXA = nonNull(functionCounts.get("MAXA"));
		this.countMDETERM = nonNull(functionCounts.get("MDETERM"));
		this.countMDURATION = nonNull(functionCounts.get("MDURATION"));
		this.countMEDIAN = nonNull(functionCounts.get("MEDIAN"));
		this.countMID = nonNull(functionCounts.get("MID"));
		this.countMIN = nonNull(functionCounts.get("MIN"));
		this.countMINA = nonNull(functionCounts.get("MINA"));
		this.countMINUTE = nonNull(functionCounts.get("MINUTE"));
		this.countMINVERSE = nonNull(functionCounts.get("MINVERSE"));
		this.countMIRR = nonNull(functionCounts.get("MIRR"));
		this.countMMULT = nonNull(functionCounts.get("MMULT"));
		this.countMOD = nonNull(functionCounts.get("MOD"));
		this.countMODE = nonNull(functionCounts.get("MODE"));
		this.countMODE_MULT = nonNull(functionCounts.get("MODE.MULT"));
		this.countMODE_SNGL = nonNull(functionCounts.get("MODE.SNGL"));
		this.countMONTH = nonNull(functionCounts.get("MONTH"));
		this.countMROUND = nonNull(functionCounts.get("MROUND"));
		this.countMULTINOMIAL = nonNull(functionCounts.get("MULTINOMIAL"));
		this.countMUNIT = nonNull(functionCounts.get("MUNIT"));
		this.countN = nonNull(functionCounts.get("N"));
		this.countNA = nonNull(functionCounts.get("NA"));
		this.countNEGBINOMDIST = nonNull(functionCounts.get("NEGBINOMDIST"));
		this.countNEGBINOM_DIST = nonNull(functionCounts.get("NEGBINOM.DIST"));
		this.countNETWORKDAYS = nonNull(functionCounts.get("NETWORKDAYS"));
		this.countNETWORKDAYS_INTL = nonNull(functionCounts.get("NETWORKDAYS.INTL"));
		this.countNOMINAL = nonNull(functionCounts.get("NOMINAL"));
		this.countNORMDIST = nonNull(functionCounts.get("NORMDIST"));
		this.countNORM_DIST = nonNull(functionCounts.get("NORM.DIST"));
		this.countNORMINV = nonNull(functionCounts.get("NORMINV"));
		this.countNORM_INV = nonNull(functionCounts.get("NORM.INV"));
		this.countNORMSDIST = nonNull(functionCounts.get("NORMSDIST"));
		this.countNORM_S_DIST = nonNull(functionCounts.get("NORM.S.DIST"));
		this.countNORMSINV = nonNull(functionCounts.get("NORMSINV"));
		this.countNORM_S_INV = nonNull(functionCounts.get("NORM.S.INV"));
		this.countNOT = nonNull(functionCounts.get("NOT"));
		this.countNOW = nonNull(functionCounts.get("NOW"));
		this.countNPER = nonNull(functionCounts.get("NPER"));
		this.countNPV = nonNull(functionCounts.get("NPV"));
		this.countNUMBERVALUE = nonNull(functionCounts.get("NUMBERVALUE"));
		this.countOCT2BIN = nonNull(functionCounts.get("OCT2BIN"));
		this.countOCT2DEC = nonNull(functionCounts.get("OCT2DEC"));
		this.countOCT2HEX = nonNull(functionCounts.get("OCT2HEX"));
		this.countODD = nonNull(functionCounts.get("ODD"));
		this.countODDFPRICE = nonNull(functionCounts.get("ODDFPRICE"));
		this.countODDFYIELD = nonNull(functionCounts.get("ODDFYIELD"));
		this.countODDLPRICE = nonNull(functionCounts.get("ODDLPRICE"));
		this.countODDLYIELD = nonNull(functionCounts.get("ODDLYIELD"));
		this.countOFFSET = nonNull(functionCounts.get("OFFSET"));
		this.countOR = nonNull(functionCounts.get("OR"));
		this.countPDURATION = nonNull(functionCounts.get("PDURATION"));
		this.countPEARSON = nonNull(functionCounts.get("PEARSON"));
		this.countPERCENTILE = nonNull(functionCounts.get("PERCENTILE"));
		this.countPERCENTILE_EXC = nonNull(functionCounts.get("PERCENTILE.EXC"));
		this.countPERCENTILE_INC = nonNull(functionCounts.get("PERCENTILE.INC"));
		this.countPERCENTRANK = nonNull(functionCounts.get("PERCENTRANK"));
		this.countPERCENTRANK_EXC = nonNull(functionCounts.get("PERCENTRANK.EXC"));
		this.countPERCENTRANK_INC = nonNull(functionCounts.get("PERCENTRANK.INC"));
		this.countPERMUT = nonNull(functionCounts.get("PERMUT"));
		this.countPERMUTATIONA = nonNull(functionCounts.get("PERMUTATIONA"));
		this.countPHI = nonNull(functionCounts.get("PHI"));
		this.countPI = nonNull(functionCounts.get("PI"));
		this.countPMT = nonNull(functionCounts.get("PMT"));
		this.countPOISSON = nonNull(functionCounts.get("POISSON"));
		this.countPOISSON_DIST = nonNull(functionCounts.get("POISSON.DIST"));
		this.countPOWER = nonNull(functionCounts.get("POWER"));
		this.countPPMT = nonNull(functionCounts.get("PPMT"));
		this.countPRICE = nonNull(functionCounts.get("PRICE"));
		this.countPRICEDISC = nonNull(functionCounts.get("PRICEDISC"));
		this.countPRICEMAT = nonNull(functionCounts.get("PRICEMAT"));
		this.countPROB = nonNull(functionCounts.get("PROB"));
		this.countPRODUCT = nonNull(functionCounts.get("PRODUCT"));
		this.countPROPER = nonNull(functionCounts.get("PROPER"));
		this.countPV = nonNull(functionCounts.get("PV"));
		this.countQUARTILE = nonNull(functionCounts.get("QUARTILE"));
		this.countQUARTILE_EXC = nonNull(functionCounts.get("QUARTILE.EXC"));
		this.countQUARTILE_INC = nonNull(functionCounts.get("QUARTILE.INC"));
		this.countQUOTIENT = nonNull(functionCounts.get("QUOTIENT"));
		this.countRADIANS = nonNull(functionCounts.get("RADIANS"));
		this.countRAND = nonNull(functionCounts.get("RAND"));
		this.countRANDBETWEEN = nonNull(functionCounts.get("RANDBETWEEN"));
		this.countRANK = nonNull(functionCounts.get("RANK"));
		this.countRANK_AVG = nonNull(functionCounts.get("RANK.AVG"));
		this.countRANK_EQ = nonNull(functionCounts.get("RANK.EQ"));
		this.countRATE = nonNull(functionCounts.get("RATE"));
		this.countRECEIVED = nonNull(functionCounts.get("RECEIVED"));
		this.countREPLACE = nonNull(functionCounts.get("REPLACE"));
		this.countREPT = nonNull(functionCounts.get("REPT"));
		this.countRIGHT = nonNull(functionCounts.get("RIGHT"));
		this.countROMAN = nonNull(functionCounts.get("ROMAN"));
		this.countROUND = nonNull(functionCounts.get("ROUND"));
		this.countROUNDDOWN = nonNull(functionCounts.get("ROUNDDOWN"));
		this.countROUNDUP = nonNull(functionCounts.get("ROUNDUP"));
		this.countROW = nonNull(functionCounts.get("ROW"));
		this.countROWS = nonNull(functionCounts.get("ROWS"));
		this.countRRI = nonNull(functionCounts.get("RRI"));
		this.countRSQ = nonNull(functionCounts.get("RSQ"));
		this.countRTD = nonNull(functionCounts.get("RTD"));
		this.countSEARCH = nonNull(functionCounts.get("SEARCH"));
		this.countSEC = nonNull(functionCounts.get("SEC"));
		this.countSECH = nonNull(functionCounts.get("SECH"));
		this.countSECOND = nonNull(functionCounts.get("SECOND"));
		this.countSERIESSUM = nonNull(functionCounts.get("SERIESSUM"));
		this.countSHEET = nonNull(functionCounts.get("SHEET"));
		this.countSHEETS = nonNull(functionCounts.get("SHEETS"));
		this.countSIGN = nonNull(functionCounts.get("SIGN"));
		this.countSIN = nonNull(functionCounts.get("SIN"));
		this.countSINH = nonNull(functionCounts.get("SINH"));
		this.countSKEW = nonNull(functionCounts.get("SKEW"));
		this.countSKEW_P = nonNull(functionCounts.get("SKEW.P"));
		this.countSLN = nonNull(functionCounts.get("SLN"));
		this.countSLOPE = nonNull(functionCounts.get("SLOPE"));
		this.countSMALL = nonNull(functionCounts.get("SMALL"));
		this.countSQRT = nonNull(functionCounts.get("SQRT"));
		this.countSQRTPI = nonNull(functionCounts.get("SQRTPI"));
		this.countSTANDARDIZE = nonNull(functionCounts.get("STANDARDIZE"));
		this.countSTDEV = nonNull(functionCounts.get("STDEV"));
		this.countSTDEVA = nonNull(functionCounts.get("STDEVA"));
		this.countSTDEVP = nonNull(functionCounts.get("STDEVP"));
		this.countSTDEVPA = nonNull(functionCounts.get("STDEVPA"));
		this.countSTDEV_P = nonNull(functionCounts.get("STDEV.P"));
		this.countSTDEV_S = nonNull(functionCounts.get("STDEV.S"));
		this.countSTEYX = nonNull(functionCounts.get("STEYX"));
		this.countSUBSTITUTE = nonNull(functionCounts.get("SUBSTITUTE"));
		this.countSUBTOTAL = nonNull(functionCounts.get("SUBTOTAL"));
		this.countSUM = nonNull(functionCounts.get("SUM"));
		this.countSUMIF = nonNull(functionCounts.get("SUMIF"));
		this.countSUMIFS = nonNull(functionCounts.get("SUMIFS"));
		this.countSUMPRODUCT = nonNull(functionCounts.get("SUMPRODUCT"));
		this.countSUMSQ = nonNull(functionCounts.get("SUMSQ"));
		this.countSUMX2MY2 = nonNull(functionCounts.get("SUMX2MY2"));
		this.countSUMX2PY2 = nonNull(functionCounts.get("SUMX2PY2"));
		this.countSUMXMY2 = nonNull(functionCounts.get("SUMXMY2"));
		this.countSYD = nonNull(functionCounts.get("SYD"));
		this.countT = nonNull(functionCounts.get("T"));
		this.countTAN = nonNull(functionCounts.get("TAN"));
		this.countTANH = nonNull(functionCounts.get("TANH"));
		this.countTBILLEQ = nonNull(functionCounts.get("TBILLEQ"));
		this.countTBILLPRICE = nonNull(functionCounts.get("TBILLPRICE"));
		this.countTBILLYIELD = nonNull(functionCounts.get("TBILLYIELD"));
		this.countTDIST = nonNull(functionCounts.get("TDIST"));
		this.countT_DIST = nonNull(functionCounts.get("T.DIST"));
		this.countT_DIST_2T = nonNull(functionCounts.get("T.DIST.2T"));
		this.countT_DIST_RT = nonNull(functionCounts.get("T.DIST.RT"));
		this.countTEXT = nonNull(functionCounts.get("TEXT"));
		this.countTIME = nonNull(functionCounts.get("TIME"));
		this.countTIMEVALUE = nonNull(functionCounts.get("TIMEVALUE"));
		this.countTINV = nonNull(functionCounts.get("TINV"));
		this.countT_INV = nonNull(functionCounts.get("T.INV"));
		this.countT_INV_2T = nonNull(functionCounts.get("T.INV.2T"));
		this.countTODAY = nonNull(functionCounts.get("TODAY"));
		this.countTRANSPOSE = nonNull(functionCounts.get("TRANSPOSE"));
		this.countTREND = nonNull(functionCounts.get("TREND"));
		this.countTRIM = nonNull(functionCounts.get("TRIM"));
		this.countTRIMMEAN = nonNull(functionCounts.get("TRIMMEAN"));
		this.countTRUE = nonNull(functionCounts.get("TRUE"));
		this.countTRUNC = nonNull(functionCounts.get("TRUNC"));
		this.countTTEST = nonNull(functionCounts.get("TTEST"));
		this.countT_TEST = nonNull(functionCounts.get("T.TEST"));
		this.countTYPE = nonNull(functionCounts.get("TYPE"));
		this.countUNICHAR = nonNull(functionCounts.get("UNICHAR"));
		this.countUNICODE = nonNull(functionCounts.get("UNICODE"));
		this.countUPPER = nonNull(functionCounts.get("UPPER"));
		this.countVALUE = nonNull(functionCounts.get("VALUE"));
		this.countVAR = nonNull(functionCounts.get("VAR"));
		this.countVARA = nonNull(functionCounts.get("VARA"));
		this.countVARP = nonNull(functionCounts.get("VARP"));
		this.countVARPA = nonNull(functionCounts.get("VARPA"));
		this.countVAR_P = nonNull(functionCounts.get("VAR.P"));
		this.countVAR_S = nonNull(functionCounts.get("VAR.S"));
		this.countVDB = nonNull(functionCounts.get("VDB"));
		this.countVLOOKUP = nonNull(functionCounts.get("VLOOKUP"));
		this.countWEBSERVICE = nonNull(functionCounts.get("WEBSERVICE"));
		this.countWEEKDAY = nonNull(functionCounts.get("WEEKDAY"));
		this.countWEEKNUM = nonNull(functionCounts.get("WEEKNUM"));
		this.countWEIBULL = nonNull(functionCounts.get("WEIBULL"));
		this.countWEIBULL_DIST = nonNull(functionCounts.get("WEIBULL.DIST"));
		this.countWORKDAY = nonNull(functionCounts.get("WORKDAY"));
		this.countWORKDAY_INTL = nonNull(functionCounts.get("WORKDAY.INTL"));
		this.countXIRR = nonNull(functionCounts.get("XIRR"));
		this.countXNPV = nonNull(functionCounts.get("XNPV"));
		this.countXOR = nonNull(functionCounts.get("XOR"));
		this.countYEAR = nonNull(functionCounts.get("YEAR"));
		this.countYEARFRAC = nonNull(functionCounts.get("YEARFRAC"));
		this.countYIELD = nonNull(functionCounts.get("YIELD"));
		this.countYIELDDISC = nonNull(functionCounts.get("YIELDDISC"));
		this.countYIELDMAT = nonNull(functionCounts.get("YIELDMAT"));
		this.countZTEST = nonNull(functionCounts.get("ZTEST"));
		this.countZ_TEST = nonNull(functionCounts.get("Z.TEST"));

		
	}
	
	public AnalysisOutput(String identifier, String error) {
		this.fileName = identifier;
		this.errorNotification = error;
	}
	
	private static int nonNull(Integer i) {
		if (i == null) {
			return 0;
		}
		return i.intValue();
	}

	private static int total(Map<?, Integer> inputCounts) {
		int total = 0;
		for(Integer i: inputCounts.values()) {
			total+=i;
		}
		return total;

	}
}